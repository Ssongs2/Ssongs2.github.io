{
    "componentChunkName": "component---src-templates-category-template-js",
    "path": "/posts/solution",
    "result": {"pageContext":{"currentCategory":"solution","categories":["All","study","solution"],"edges":[{"node":{"id":"ec8bf2ff-2421-5975-8012-5a49b928c64b","excerpt":"scrollHeight returns 0 javascript파일에서 jquery를 사용하여, element를 가져와 scrollHeight를 얻고자 함. $(element).prop(‘scrollHeight’); 그런데 계속 0이 찍히는 것이다. 문제의 상황 그림과 같이 scrollBox는 TimePickerBox를 클릭할 때 열렸다 닫히는데,\nscrollBox의 display가 none인 상황에서 scrollHeight를 check했다.  해결의 과정 a. 구글링을 한다. https://stackoverflow.com/questions/8100099/checking-for-scrollheight-of-an-element-sometimes-returning-0 b. stack overflow의 답변 요약 It had to do with the what I was trying to check after different elements were set to display none. …","fields":{"slug":"/common_scroll/"},"frontmatter":{"categories":"solution","title":"(common_scroll) scrollHeight of an element returns 0","date":"March 08, 2022"}},"next":{"fields":{"slug":"/jquery_plugin/"}},"previous":{"fields":{"slug":"/app/"}}},{"node":{"id":"2e523f78-8167-5d66-bfa1-d02438bbfd4f","excerpt":"누가 나 요즘 개발하는 거 다큐멘터리로 찍는다면 ‘송은지의 개발언어는 역행한다.’ (feat. 벤자민의 시간은 거꾸로간다.)로 타이틀을 지으리라. ECMAScript6 명세 또는 스펙을 따라 개발하던 javascript를 이젠 ECMAScript5를 따르게 되며, 정말 많은 불편함을 몸소 겪고 있다. 그동안 컴포넌트, 모듈에 대한 용어를 많이 이야기했다면, 이젠 플러그인이 자주 등장할 것 같다. 불편하지만, 레트로 정신승리를 해본다. 최신의 편리함을 느끼며 최신에 대한 공부를 게을리 하지 말아야겠다. 그저 플러그인만 알고싶었을 뿐인데 계속해서 따라오는 용어들 때문에, 4탄으로 나누어 정리를 해본다. 1탄_jQuery 플러그인 2탄_AMD,CommonJS,UMD 3탄_용어_플러그인, 컴포넌트, 모듈 4탄_용어_프레임워크, 라이브러리 1탄_jQuery 플러그인 - jQuery 플러그인이란? - jQuery 플러그인 작성 - 기본적인 플러그인 만들기 - 옵션을 받아서 사용하기 - 메소드…","fields":{"slug":"/jquery_plugin/"},"frontmatter":{"categories":"solution","title":"(jquery_plugin) 1탄_jQuery 플러그인","date":"March 03, 2022"}},"next":{"fields":{"slug":"/css_location/"}},"previous":{"fields":{"slug":"/common_scroll/"}}},{"node":{"id":"4c35afb7-b9ba-57b3-a336-39baa16d9b1d","excerpt":"무작정 CSS를 적용하고자 했을 때 가장 헷갈렸던 두 가지의 속성을 정리해보려고 한다. 퍼블리싱을 하고자 한다면 display와 position을 보게 될 것이다. 보지 못했다면 퍼블리싱을 한 것이 아니다. display는 웹페이지의 레이아웃을 결정하는 CSS의 중요한 속성이고, position은 레이아웃 안에서 HTML요소의 구체적인위치를 결정하는 속성이다. 그러면 두 가지 속성을 조금 자세히 살펴보자. display display속성의 값으로는 아래 세 가지 뿐이다. block inline inline-block HTML의 모든 요소는 display의 속성 값을 가지는데 대부분, 1. block 혹은 2 inline을 가진다. block\n의 경우  등이 있다. block은 말 그대로 레이아웃이 하나의 블럭(라인)을 차지한다. 즉 해당 라인의 너비를 모두 차지한다. inline\n의 경우  가 있으며, 하나의 라인을 차지하지 않고, HTML요소가 가진 너비만큼만 차지한다. inli…","fields":{"slug":"/css_location/"},"frontmatter":{"categories":"solution","title":"(CSS_location) display와 position","date":"February 18, 2022"}},"next":{"fields":{"slug":"/network_internetconnection/"}},"previous":{"fields":{"slug":"/jquery_plugin/"}}},{"node":{"id":"661cdf5f-735c-5964-b262-30d62a09c3ef","excerpt":"렌더링이란? 리액트 앨리먼트를 html 형태로 변환하여 화면에 그려지는 것 렌더링 이슈 리덕스를 사용해서 state 상태관리를 하는데, setState로 렌더링을 한 번 더 하게하는 코드를 발견했다. setState를 지우니 자식컴포넌트 그리드의 데이터가 바인딩이 되지 않는다. (!?) 문제의 코드 AComponent 🥊 React가 렌더링을 실행할 때 props가 변경되었을 때 state가 변경되었을 때 forceUpdate()를 실행하였을 때 부모 컴포넌트가 렌더링 되었을 때 해결의 과정 a. 4번과 같이 부모 컴포넌트가 렌더링이 되면, 자식 컴포넌트가 렌더링이 된다고 인지 b. 리덕스 라이브러리를 사용하지 않은 순수 리액트에서만 해당되는 이야기 c. 리덕스 라이브러리를 사용한 경우는 1~3번만 렌더링이 됨 d. 현재는 setState로 상태변경이 이뤄져야 자식 컴포넌트에서의 렌더링이 제대로 됨. e. setState({ bState: true }) 상태변경을 하면 렌더링이 되…","fields":{"slug":"/react_render/"},"frontmatter":{"categories":"solution","title":"(React) 렌더링을 언제 하길래 데이터 변경이 안돼?","date":"January 06, 2022"}},"next":{"fields":{"slug":"/js_copy/"}},"previous":{"fields":{"slug":"/js_spa/"}}},{"node":{"id":"ac8c1082-d880-5d70-b935-c2524174af82","excerpt":"문제 부모로부터 내려받은 props의 값을, 자식의 componentWillReceiveProps 함수에서,\nthis.props와 nextProps의 값을 디버깅해보면 언제나 똑같다. 💡 구글링 https://stackoverflow.com/questions/47227329/componentwillreceiveprops-this-props-and-nextprops-always-the-same 🔨 stackOverFlow 문제 요약 👉 부모 컴포넌트인 ProductText는 단방향으로 공급되는 state를 가진다. 👉 부모 컴포넌트에서 배열이 변경될 때, 자식 컴포넌트에서 변경된 배열 prop를 감지해 callback 함수를 호출하고 싶다. 👉 하지만 자식의 componentWillReceiveProps 함수에서 this.props와 nextProps 언제나 같아 변화를 감지할 수 없다.  🔨 해결책 👉 부모의 state가 불변하도록 변경되지 않았다. 👉 그 이유는, 같은 메모리 주…","fields":{"slug":"/react/"},"frontmatter":{"categories":"solution","title":"(React) componentWillReceiveProps - this.props and nextProps always same","date":"December 16, 2021"}},"next":{"fields":{"slug":"/js_sync_async/"}},"previous":{"fields":{"slug":"/js_copy/"}}}]}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}