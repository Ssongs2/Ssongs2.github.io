{"componentChunkName":"component---src-templates-category-template-js","path":"/posts","result":{"pageContext":{"currentCategory":"All","categories":["All","study","블로그","solution","회고"],"edges":[{"node":{"id":"85d26411-8bfb-539a-a175-a307c4b47ada","excerpt":"얕은 복사(Shallow Copy) 객체가 담겨있는 변수를 다른 변수에 할당하면 call by reference (참조)가 일어난다. 값이 담긴 주솟값들로 이루어진 묶음을 가리키는 주솟값을 복사한다. 복사된 객체는 원본 객체의 주솟값을 참조하고 있는 것이다.   깊은 복사(Deep Copy) 독립적인 메모리에 값 자체를 할당하여 생성하는 것으로, 깊은 복사를 통해 원본의 객체와는 다른 고유한 객체를 생성한다. Object.assign() 사용법 Object.assign(생성할 객체, 원본 객체) 메서드의 첫 번째 인수로 빈 객체를 넣어주며,\n두 번째 인수로 할당할 객체를 넣어준다. … (Spread Operator) …","fields":{"slug":"/js_copy/"},"frontmatter":{"categories":"study","title":"(javascript) 얕은 복사? 깊은 복사?","date":"December 17, 2021"}},"next":{"fields":{"slug":"/react/"}},"previous":null},{"node":{"id":"96446fc0-9f9d-5430-8ea6-5c9f61652a4a","excerpt":"문제 부모로부터 내려받은 props의 값을, 자식의 componentWillReceiveProps 함수에서,\nthis.props와 nextProps의 값을 디버깅해보면 언제나 똑같다. 💡 구글링 https://stackoverflow.com/questions/47227329/componentwillreceiveprops-this-props-and-nextprops-always-the-same 🔨 stackOverFlow 문제 요약 👉 부모 컴포넌트인 ProductText는 단방향으로 공급되는 state를 가진다. 👉 부모 컴포넌트에서 배열이 변경될 때, 자식 컴포넌트에서 변경된 배열 prop를 감지해 callback …","fields":{"slug":"/react/"},"frontmatter":{"categories":"solution","title":"(React) componentWillReceiveProps - this.props and nextProps always same","date":"December 16, 2021"}},"next":{"fields":{"slug":"/js_sync_async/"}},"previous":{"fields":{"slug":"/js_copy/"}}},{"node":{"id":"ff5a2b8e-1b7d-5341-96e9-ade98bda10f5","excerpt":"비동기 처리 생각대로 되지않아 열받을 찰나 비동기 처리에 대한 문제임을 발견하고, 각성하는 바 정리해본다. 1️⃣ 첫 번째 사례 ajax 콘솔 창 로그는 undefined가 찍힌다. 왜그럴까? 비동기 처리의 문제이다. 서버와 통신하는 ajax 객체가 응답을 받아오기 전에 출력한다. 2️⃣ 두 번째 사례 setTimeout(); 비동기 처리 개념을 모르고 해당 코드를 본다면 콘솔 창에는 “1”, “2”가 찍힌다고 생각할 것이다. 그런데 “2”, “1”이 찍힌다. setTimeout() 함수에서 3초 후에 “1”을 찍게 되어있는데, 이 로직을 기다려주지 않고 나머지 코드를 먼저 실행한다. javascript에서의 비동기 처리 위…","fields":{"slug":"/js_sync_async/"},"frontmatter":{"categories":"study","title":"(javascript) 동기? 비동기?","date":"July 28, 2021"}},"next":{"fields":{"slug":"/gatsby-github-blog/"}},"previous":{"fields":{"slug":"/react/"}}},{"node":{"id":"751b48ef-9715-54c2-a5c4-4298f77e7c80","excerpt":"제 블로그의 테마나 Gatsby의 다른 테마를 활용해서 Github Blog를 만들고 싶은 분들을 계실텐데요! 이런 분들에게 도움을 드리고자 이 글을 쓰게 되었습니다. 잘 안되는 부분이나 궁금한 점을 댓글로 남겨주면 찾아보고 답변을 달아보도록 하겠습니다! 1. Repository 생성하기 GitHub Blog를 만들려면 Github에 Repository를 생성해야 합니다.  GitHub에 로그인 한 뒤에 우측 상단에 있는 New Repository 버튼을 클릭하면 repository 생성 페이지로 이동하게 됩니다. 이 때 Import a repository 버튼을 클릭합니다.  아래 페이지에 도달하시면 두 가지 정보를…","fields":{"slug":"/gatsby-github-blog/"},"frontmatter":{"categories":"블로그","title":"Gatsby 테마로 GitHub Blog 만들기","date":"July 06, 2021"}},"next":{"fields":{"slug":"/why-dev-blog/"}},"previous":{"fields":{"slug":"/js_sync_async/"}}},{"node":{"id":"ab76d168-15aa-5ec7-bbc6-006cea593572","excerpt":"🙋‍♂️ 내 소개 + 블로그 소개  나는 개발 4년차, 블로그 4년차인 개발자 줌코딩이다👋 개발을 시작하고 얼마지 않아 블로그를 운영하기 시작했고, 개발도 블로그도 꾸준히 운영하다보니 글의 양도 많아지고 글을 읽어주시는 분들의 수도 점차 늘어났다. (어느새 페이지뷰 수도 꽤 많이 늘었다🌝)  그렇게 블로그에 점점 애정이 생겨가면서 자연스럽게 내 블로그를 직접 개발하여 커스터마이징해보고 싶은 욕심이 생겼다. 그리고 올해 입사를 하게 되어 입사 전 마지막 프로젝트로 개발 블로그를 직접 디자인하고 개발해보게 되었다.  블로그를 이전하고 처음 쓰는 글로 내 블로그 경험을 나누면 좋겠다는 생각에 이 글을 쓰게 되었다. 블로그에 관심…","fields":{"slug":"/why-dev-blog/"},"frontmatter":{"categories":"블로그 회고","title":"왜 개발 블로그를 하시나요?","date":"June 23, 2021"}},"next":{"fields":{"slug":"/gatsby-starter-zoomkoding-introduction/"}},"previous":{"fields":{"slug":"/gatsby-github-blog/"}}},{"node":{"id":"12d0e8f8-da82-5558-9c47-90750ba3c2ee","excerpt":"👋 소개 블로그를 직접 운영하면서 조금씩 그려봤던 이상적인 개발 블로그 테마를 Gatsby를 통해 만들어보게 되었습니다. 이 테마가 블로그를 운영하고자 하시는 분들에게 자신의 이야기를 잘 담을 수 있는 공간이 되었으면 좋겠습니다.🙌 블로그 테마가 맘에 드셨다면 아래 과정을 통해 자신의 블로그를 만들어보시길 바랍니다! 혹시 만드시는 과정에서 궁금하신 점이나 어려움이 있으시다면 이슈를 통해 문의 남겨주세요! 최대한 빠르게 답변 드리겠습니다! 😀 🚀 시작하기 Github Page나 Netlify 중 원하시는 배포 환경에 따라 다음 과정을 진행하시면 빠르게 블로그를 만드실 수 있습니다. 🦖 GitHub Page로 만들기 깃헙…","fields":{"slug":"/gatsby-starter-zoomkoding-introduction/"},"frontmatter":{"categories":"블로그","title":"쉽고 빠르게 나만의 개츠비(Gatsby) 블로그 만들기","date":"March 22, 2021"}},"next":{"fields":{"slug":"/react_render/"}},"previous":{"fields":{"slug":"/why-dev-blog/"}}},{"node":{"id":"cd2eb3e4-6d58-5693-aaf1-f662ad0b5360","excerpt":"렌더링이란? 리액트 앨리먼트를 html 형태로 변환하여 화면에 그려지는 것   렌더링 이슈 리덕스를 사용해서 state 상태관리를 하는데, setState로 렌더링을 한 번 더하는 코드를 발견했다. setState를 지우니 자식컴포넌트 그리드의 데이터가 바인딩이 되지 않는다. (!?) 문제의 코드 AComponent 🥊 React가 렌더링을 실행할 때 props가 변경되었을 때   state가 변경되었을 때   forceUpdate()를 실행하였을 때   부모 컴포넌트가 렌더링 되었을 때   문제   a. 4번과 같이 부모 컴포넌트가 렌더링이 되면, 자식 컴포넌트가 렌더링이 된다고 인지   b. 리덕스 라이브러리를 사…","fields":{"slug":"/react_render/"},"frontmatter":{"categories":"study","title":"(React) 렌더링을 언제 하길래 데이터 변경이 안돼?","date":"January 06, 2021"}},"next":null,"previous":{"fields":{"slug":"/gatsby-starter-zoomkoding-introduction/"}}}]}},"staticQueryHashes":["1073350324","2938748437"]}