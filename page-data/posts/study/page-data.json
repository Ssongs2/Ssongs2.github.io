{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/study","result":{"pageContext":{"currentCategory":"study","categories":["All","study","solution"],"edges":[{"node":{"id":"bcb8b5ce-d855-56d2-941d-9438403f5838","excerpt":"Essential How to use git Git init: 프로젝트 폴더에 .git 폴더를 생성 초기화한다. .gitignore: 숨김파일로 존재. 깃에 올리지 않을 폴더나 파일들을 관리. 절대 올리지 않을 파일을 미리 작성 Git remote: 로컬 폴더와 git 레포지토리를 연결한다. ( git remote add origin .git) Git status: git 관리 하에 있는 폴더 안에서 변화가 있는 파일&폴더를 알려줌. Git diff: 이전 커밋과 비교하여 어떻게 달라졌는지 확인 Git log: 커밋 로그를 볼 수 있음.  Git add: 서버에 올리기 전 변경점이 있는 파일을 stage로 올린다. G…","fields":{"slug":"/common_git/"},"frontmatter":{"categories":"study","title":"(common_git) Essential How to use git","date":"January 19, 2022"}},"next":{"fields":{"slug":"/js_spa/"}},"previous":null},{"node":{"id":"d9b07ff5-d33b-55ab-97c4-173264d1831a","excerpt":"누군가 나한테 물어본 질문   👨🏼‍🦱 : JSX를 쓰면 새로고침이 안되니까 이 JSX를 이용해서 데이터를 묶어둘 수 있지않아? 🙋🏻‍♀️ : 네??? JSX는 그냥 문법일 뿐인데   까지 얘기함; 새로고침은 JSX와 관련이 없습니다.하고 SPA를 멋드러지게 설명 하고싶었어요.   SPA(Single Page Application) 모든 정적 리소스를 최초 접근 시 단 한 번만 다운로드 한다.  새로운 페이지 요청 시 페이지 갱신에 필요한 데이터만 JSON으로 전달받아 페이지를 갱신한다. 전체 페이지를 다시 렌더링하지 않고 변경되는 부분만 갱신하므로 새로고침이 발생하지 않는다. SPA를 더 자세히 설명하기 위해서는 SPA의 반대인…","fields":{"slug":"/js_spa/"},"frontmatter":{"categories":"study","title":"(javascript) SPA는 뭐야뭐야뭐야뭐야~?","date":"January 11, 2022"}},"next":{"fields":{"slug":"/react_render/"}},"previous":{"fields":{"slug":"/common_git/"}}},{"node":{"id":"85d26411-8bfb-539a-a175-a307c4b47ada","excerpt":"얕은 복사(Shallow Copy) 객체가 담겨있는 변수를 다른 변수에 할당하면 call by reference (참조)가 일어난다. 값이 담긴 주솟값들로 이루어진 묶음을 가리키는 주솟값을 복사한다. 복사된 객체는 원본 객체의 주솟값을 참조하고 있는 것이다.   깊은 복사(Deep Copy) 독립적인 메모리에 값 자체를 할당하여 생성하는 것으로, 깊은 복사를 통해 원본의 객체와는 다른 고유한 객체를 생성한다. Object.assign() 사용법 Object.assign(생성할 객체, 원본 객체) 메서드의 첫 번째 인수로 빈 객체를 넣어주며,\n두 번째 인수로 할당할 객체를 넣어준다. … (Spread Operator) …","fields":{"slug":"/js_copy/"},"frontmatter":{"categories":"study","title":"(javascript) 얕은 복사? 깊은 복사?","date":"December 17, 2021"}},"next":{"fields":{"slug":"/react/"}},"previous":{"fields":{"slug":"/react_render/"}}},{"node":{"id":"ff5a2b8e-1b7d-5341-96e9-ade98bda10f5","excerpt":"비동기 처리 생각대로 되지않아 열받을 찰나 비동기 처리에 대한 문제임을 발견하고, 각성하는 바 정리해본다. 1️⃣ 첫 번째 사례 ajax 콘솔 창 로그는 undefined가 찍힌다. 왜그럴까? 비동기 처리의 문제이다. 서버와 통신하는 ajax 객체가 응답을 받아오기 전에 출력한다. 2️⃣ 두 번째 사례 setTimeout(); 비동기 처리 개념을 모르고 해당 코드를 본다면 콘솔 창에는 “1”, “2”가 찍힌다고 생각할 것이다. 그런데 “2”, “1”이 찍힌다. setTimeout() 함수에서 3초 후에 “1”을 찍게 되어있는데, 이 로직을 기다려주지 않고 나머지 코드를 먼저 실행한다. javascript에서의 비동기 처리 위…","fields":{"slug":"/js_sync_async/"},"frontmatter":{"categories":"study","title":"(javascript) 동기? 비동기?","date":"July 28, 2021"}},"next":null,"previous":{"fields":{"slug":"/react/"}}}]}},"staticQueryHashes":["1073350324","2938748437"]}