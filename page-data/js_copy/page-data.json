{"componentChunkName":"component---src-templates-blog-template-js","path":"/js_copy/","result":{"data":{"cur":{"id":"85d26411-8bfb-539a-a175-a307c4b47ada","html":"<h2 id=\"얕은-복사shallow-copy\" style=\"position:relative;\"><a href=\"#%EC%96%95%EC%9D%80-%EB%B3%B5%EC%82%ACshallow-copy\" aria-label=\"얕은 복사shallow copy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>얕은 복사(Shallow Copy)</h2>\n<p>객체가 담겨있는 변수를 다른 변수에 할당하면 call by reference (참조)가 일어난다.<br>\n값이 담긴 주솟값들로 이루어진 묶음을 가리키는 주솟값을 복사한다.<br>\n복사된 객체는 원본 객체의 주솟값을 참조하고 있는 것이다.  </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const obj = { a: 1, b: 2};\nconst objCopy = obj;\n\nobjCopy.a = 2;\n\nconsole.log(\"obj === objCopy: \", obj === objCopy); // true\nconsole.log(\"obj.a:\", obj.a); // 2</code></pre></div>\n<h2 id=\"깊은-복사deep-copy\" style=\"position:relative;\"><a href=\"#%EA%B9%8A%EC%9D%80-%EB%B3%B5%EC%82%ACdeep-copy\" aria-label=\"깊은 복사deep copy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>깊은 복사(Deep Copy)</h2>\n<p>독립적인 메모리에 값 자체를 할당하여 생성하는 것으로, 깊은 복사를 통해 원본의 객체와는 다른 고유한 객체를 생성한다.</p>\n<h3 id=\"objectassign\" style=\"position:relative;\"><a href=\"#objectassign\" aria-label=\"objectassign permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Object.assign()</h3>\n<blockquote>\n<h4 id=\"사용법\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%9A%A9%EB%B2%95\" aria-label=\"사용법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사용법</h4>\n<p>Object.assign(생성할 객체, 원본 객체) 메서드의 첫 번째 인수로 빈 객체를 넣어주며,\n두 번째 인수로 할당할 객체를 넣어준다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const obj = { a:1, b: 2};\nconst objCopy = Object.assign({}, obj);\n\nobjCopy.a = 2;\n\nconsole.log(\"obj === objCopy: \", obj === objCopy); // false\nconsole.log(\"obj.a:\", obj.a); // 1</code></pre></div>\n<h3 id=\"-spread-operator\" style=\"position:relative;\"><a href=\"#-spread-operator\" aria-label=\" spread operator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>… (Spread Operator)</h3>\n<blockquote>\n<h4 id=\"사용법-1\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%9A%A9%EB%B2%95-1\" aria-label=\"사용법 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사용법</h4>\n<p>…연산자를 사용하여 고유한 객체를 생성한다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const obj = { a:1, b:2 };\nconst objCopy = ...obj;</code></pre></div>\n<p>깊은 복사의 방법 Object.assign()과 …는 <span style=\"color:red\">1레벨 깊이</span>에서는<br>\n우리의 생각대로 깊은 복사가 가능하지만, <span style=\"color:red\">그 이상 레벨의 복사에서는 아래의 방법을 통해 복사를 진행해야 한다.</span></p>\n<h3 id=\"완벽한-deep-copy를-위한-방법\" style=\"position:relative;\"><a href=\"#%EC%99%84%EB%B2%BD%ED%95%9C-deep-copy%EB%A5%BC-%EC%9C%84%ED%95%9C-%EB%B0%A9%EB%B2%95\" aria-label=\"완벽한 deep copy를 위한 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>완벽한 Deep Copy를 위한 방법</h3>\n<p> <strong>1. 재귀적으로 깊은 복사를 수행:</strong> 원본 객체의 최고 레벨의 깊이까지 가 복사하는 방법으로 객체의 깊이가 길어질수록 시간복잡도(Time Complexity)가 늘어난다.<br>\n<br />\n<strong>2. Lodash의 cloneDeep 함수 수행:</strong>  자바스크립트의 함수형 라이브러리로 Lodash의 cloneDeep함수를 사용하면 완벽하게 깊은 복사를 사용할 수 있다.<br>\n<br />\n<strong>3. JSON.parse()와 JSON.stringify()함수 사용:</strong>  문자열로 변환하는 순간 참조 값이 끊기기 때문에 새로운 Object로 만들어서 사용할 수 있음  </p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%96%95%EC%9D%80-%EB%B3%B5%EC%82%ACshallow-copy\">얕은 복사(Shallow Copy)</a></li>\n<li>\n<p><a href=\"#%EA%B9%8A%EC%9D%80-%EB%B3%B5%EC%82%ACdeep-copy\">깊은 복사(Deep Copy)</a></p>\n<ul>\n<li><a href=\"#objectassign\">Object.assign()</a></li>\n<li><a href=\"#-spread-operator\">… (Spread Operator)</a></li>\n<li><a href=\"#%EC%99%84%EB%B2%BD%ED%95%9C-deep-copy%EB%A5%BC-%EC%9C%84%ED%95%9C-%EB%B0%A9%EB%B2%95\">완벽한 Deep Copy를 위한 방법</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"얕은 복사(Shallow Copy) 객체가 담겨있는 변수를 다른 변수에 할당하면 call by reference (참조)가 일어난다. 값이 담긴 주솟값들로 이루어진 묶음을 가리키는 주솟값을 복사한다. 복사된 객체는 원본 객체의 주솟값을 참조하고 있는 것이다.   깊은 복사(Deep Copy) 독립적인 메모리에 값 자체를 할당하여 생성하는 것으로, 깊은 복사를 통해 원본의 객체와는 다른 고유한 객체를 생성한다. Object.assign() 사용법 Object.assign(생성할 객체, 원본 객체) 메서드의 첫 번째 인수로 빈 객체를 넣어주며,\n두 번째 인수로 할당할 객체를 넣어준다. … (Spread Operator) …","frontmatter":{"date":"December 17, 2021","title":"(javascript) 얕은 복사? 깊은 복사?","categories":"study","author":"ssongs2","emoji":"🕸"},"fields":{"slug":"/js_copy/"}},"next":{"id":"96446fc0-9f9d-5430-8ea6-5c9f61652a4a","html":"<h2 id=\"span-stylecolorred문제span\" style=\"position:relative;\"><a href=\"#span-stylecolorred%EB%AC%B8%EC%A0%9Cspan\" aria-label=\"span stylecolorred문제span permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><span style=\"color:red\">문제</span></h2>\n<p>부모로부터 내려받은 props의 값을, 자식의 componentWillReceiveProps 함수에서,\nthis.props와 nextProps의 값을 디버깅해보면 언제나 똑같다.</p>\n<h2 id=\"-구글링\" style=\"position:relative;\"><a href=\"#-%EA%B5%AC%EA%B8%80%EB%A7%81\" aria-label=\" 구글링 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💡 구글링</h2>\n<p><a href=\"https://stackoverflow.com/questions/47227329/componentwillreceiveprops-this-props-and-nextprops-always-the-same\">https://stackoverflow.com/questions/47227329/componentwillreceiveprops-this-props-and-nextprops-always-the-same</a></p>\n  <br>  \n<blockquote>\n<h4 id=\"-stackoverflow-문제-요약\" style=\"position:relative;\"><a href=\"#-stackoverflow-%EB%AC%B8%EC%A0%9C-%EC%9A%94%EC%95%BD\" aria-label=\" stackoverflow 문제 요약 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🔨 stackOverFlow 문제 요약</h4>\n<p>👉 부모 컴포넌트인 ProductText는 단방향으로 공급되는 state를 가진다.<br>\n👉 부모 컴포넌트에서 배열이 변경될 때, 자식 컴포넌트에서 변경된 배열 prop를 감지해 callback 함수를 호출하고 싶다.<br>\n👉 하지만 자식의 componentWillReceiveProps 함수에서 this.props와 nextProps 언제나 같아 변화를 감지할 수 없다.<br>\n<br>  </p>\n</blockquote>\n<blockquote>\n<h4 id=\"-해결책\" style=\"position:relative;\"><a href=\"#-%ED%95%B4%EA%B2%B0%EC%B1%85\" aria-label=\" 해결책 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🔨 해결책</h4>\n<p>👉 부모의 state가 불변하도록 변경되지 않았다.<br>\n👉 그 이유는, 같은 메모리 주소의 값을 변경하였던 것.  </p>\n</blockquote>\n<h2 id=\"-내-문제점---나의-코드\" style=\"position:relative;\"><a href=\"#-%EB%82%B4-%EB%AC%B8%EC%A0%9C%EC%A0%90---%EB%82%98%EC%9D%98-%EC%BD%94%EB%93%9C\" aria-label=\" 내 문제점   나의 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💡 내 문제점 - 나의 코드</h2>\n<p><strong>부모 컴포넌트</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">    constructor<span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        super<span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span>\n\n        this.state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            faxRecvInfo <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>    // 받는사람 정보\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    onSaveOrgPopup <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin class-name\">let</span> _faxRecvInfo <span class=\"token operator\">=</span> this.state.faxRecvInfo,\n            _faxRecvList <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>let <span class=\"token assign-left variable\">i</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span> e.length<span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            _faxRecvList <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"name\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"ssongs2\"</span>,\n                <span class=\"token string\">\"faxNo\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"0507-1111-1111\"</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        _faxRecvInfo.push<span class=\"token punctuation\">(</span>_faxRecvList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        this.setState<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> faxRecvInfo: _faxRecvInfo <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function-name function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        const <span class=\"token punctuation\">{</span> faxRecvInfo <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> this.state<span class=\"token punctuation\">;</span>\n\n        <span class=\"token builtin class-name\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;></span>\n                <span class=\"token operator\">&lt;</span>Child\n                    <span class=\"token assign-left variable\">faxRecvInfo</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>faxRecvInfo<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>/<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  </code></pre></div>\n<p><strong>자식 컴포넌트</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">    componentWillReceiveProps<span class=\"token punctuation\">(</span>nextProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        console.log<span class=\"token punctuation\">(</span><span class=\"token string\">\"this.props:\"</span>, this.props, nextProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                 // 왜? 똑같아?\n        if<span class=\"token punctuation\">(</span>this.props.faxRecvInfo <span class=\"token operator\">!=</span> nextProps.faxRecvInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function-name function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token builtin class-name\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;></span>\n            <span class=\"token operator\">&lt;</span>/<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"-해결---나의-코드\" style=\"position:relative;\"><a href=\"#-%ED%95%B4%EA%B2%B0---%EB%82%98%EC%9D%98-%EC%BD%94%EB%93%9C\" aria-label=\" 해결   나의 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💡 해결 - 나의 코드</h2>\n<p><strong>부모 컴포넌트</strong><br>\n: 깊은 복사가 되어, 원본의 state가 변경이 됨. <br>\n얕은 복사를 통해 기존 state가 변경되었던 문제를 해결  <br></p>\n<h4 id=\"arrayfrom\" style=\"position:relative;\"><a href=\"#arrayfrom\" aria-label=\"arrayfrom permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Array.from()</h4>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">    <span class=\"token punctuation\">..</span>.\n\n    onSaveOrgPopup <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin class-name\">let</span> _faxRecvInfo <span class=\"token operator\">=</span> Array.from<span class=\"token punctuation\">(</span>this.state.faxRecvInfo<span class=\"token punctuation\">)</span>,\n            _faxRecvList <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n        <span class=\"token punctuation\">..</span>.\n\n         _faxRecvInfo.push<span class=\"token punctuation\">(</span>_faxRecvList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        this.setState<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> faxRecvInfo: _faxRecvInfo <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">..</span>.\n  </code></pre></div>\n<br />\n<h3 id=\"appending-basic-knowledge\" style=\"position:relative;\"><a href=\"#appending-basic-knowledge\" aria-label=\"appending basic knowledge permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>appending basic knowledge</h3>\n<p>얕은복사와 깊은복사 - <a href=\"https://ssongs2.github.io/js_copy/\">https://ssongs2.github.io/js_copy/</a></p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#span-stylecolorred%EB%AC%B8%EC%A0%9Cspan\"><span style=\"color:red\">문제</span></a></li>\n<li><a href=\"#-%EA%B5%AC%EA%B8%80%EB%A7%81\">💡 구글링</a></li>\n<li><a href=\"#-%EB%82%B4-%EB%AC%B8%EC%A0%9C%EC%A0%90---%EB%82%98%EC%9D%98-%EC%BD%94%EB%93%9C\">💡 내 문제점 - 나의 코드</a></li>\n<li>\n<p><a href=\"#-%ED%95%B4%EA%B2%B0---%EB%82%98%EC%9D%98-%EC%BD%94%EB%93%9C\">💡 해결 - 나의 코드</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"#arrayfrom\">Array.from()</a></li>\n</ul>\n</li>\n<li><a href=\"#appending-basic-knowledge\">appending basic knowledge</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"December 16, 2021","title":"(React) componentWillReceiveProps - this.props and nextProps always same","categories":"solution","author":"ssongs2","emoji":"🧩"},"fields":{"slug":"/react/"}},"prev":{"id":"cd2eb3e4-6d58-5693-aaf1-f662ad0b5360","html":"<h2 id=\"렌더링이란\" style=\"position:relative;\"><a href=\"#%EB%A0%8C%EB%8D%94%EB%A7%81%EC%9D%B4%EB%9E%80\" aria-label=\"렌더링이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>렌더링이란?</h2>\n<p>리액트 앨리먼트를 html 형태로 변환하여 화면에 그려지는 것  </p>\n<h2 id=\"렌더링-이슈\" style=\"position:relative;\"><a href=\"#%EB%A0%8C%EB%8D%94%EB%A7%81-%EC%9D%B4%EC%8A%88\" aria-label=\"렌더링 이슈 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>렌더링 이슈</h2>\n<p>리덕스를 사용해서 state 상태관리를 하는데, setState로 렌더링을 한 번 더 하게하는 코드를 발견했다.<br>\nsetState를 지우니 자식컴포넌트 그리드의 데이터가 바인딩이 되지 않는다. (!?)</p>\n<p><strong>문제의 코드</strong>  </p>\n<h5 id=\"span-stylecolorblueacomponentspan\" style=\"position:relative;\"><a href=\"#span-stylecolorblueacomponentspan\" aria-label=\"span stylecolorblueacomponentspan permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><span style=\"color:blue\">AComponent</span></h5>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import React, { Component } from 'react'; // 기본 react component\nimport { connect } from 'react-redux; // redux\n\nimport * as action from 'bl/action'; // redux - action\n\n    class CptA extends Component {\n\n        constructor(props) {\n            super(props);\n\n            this.state = { \n                aState: [{}],\n                bState: false,\n            }\n        }\n\n        functionA = () => {  // functionA가 실행되는 상황이라고 가정\n            const { setAB } = this.props.setAB;\n\n            apiA(apiAParam)\n            .then((response) => {\n                if(response.resultCode === 200 ){\n                    // 아래의 코드를 지우면 자식컴포넌트 그리드의 데이터가 바인딩 되지 않는다(?)\n                    this.setState({\n                        aState: response.resultData,\n                        bState: true\n                    });\n\n                    setAB(response.resultData, true);\n\n                }\n            })\n        } \n\n        render(){\n            return(\n                {\n                    &lt;CptB className= Astate ? 'cptB' : 'cptB_complete'>\n                      &lt;CptC> // 데이터 그리드 - 컴포넌트  \n                    &lt;/> \n                }\n            )\n        }\n    }\n\n// redux - state 가져오기\nlet mapStateToProps = (state) => {\n    return {\n        aState: state.a_rd.aState,\n        bState: state.b_rd.bState\n    }\n}\n\n// redux - state 변경\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        setAB: (aState, bState) => dispatch(action.sendPage_act(aState, bState))\n    }\n}\n\nCptA = connect(mapStateToProps, mapDispatchToProps)(CptA);\nexport default CptA;</code></pre></div>\n<h2 id=\"🥊-react가-렌더링을-실행할-때\" style=\"position:relative;\"><a href=\"#%F0%9F%A5%8A-react%EA%B0%80-%EB%A0%8C%EB%8D%94%EB%A7%81%EC%9D%84-%EC%8B%A4%ED%96%89%ED%95%A0-%EB%95%8C\" aria-label=\"🥊 react가 렌더링을 실행할 때 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🥊 React가 렌더링을 실행할 때</h2>\n<ol>\n<li>props가 변경되었을 때  </li>\n<li>state가 변경되었을 때  </li>\n<li>forceUpdate()를 실행하였을 때  </li>\n<li><strong>부모 컴포넌트가 렌더링 되었을 때</strong>  </li>\n</ol>\n<h2 id=\"해결의-과정\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EA%B2%B0%EC%9D%98-%EA%B3%BC%EC%A0%95\" aria-label=\"해결의 과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해결의 과정</h2>\n<blockquote>\n<p>a. 4번과 같이 부모 컴포넌트가 렌더링이 되면, 자식 컴포넌트가 렌더링이 된다고 인지<br>\nb. 리덕스 라이브러리를 사용하지 않은 순수 리액트에서만 해당되는 이야기<br>\nc. 리덕스 라이브러리를 사용한 경우는 1~3번만 렌더링이 됨<br>\nd. 현재는 setState로 상태변경이 이뤄져야 자식 컴포넌트에서의 렌더링이 제대로 됨.<br>\ne. setState({ bState: true }) 상태변경을 하면 렌더링이 되고, redux를 통한 상태변경을 하면 렌더링이 안되는 이유  </p>\n<blockquote>\n<ol>\n<li>bState는 현재 CptC에 영향을 주고있음.  </li>\n<li>aState만 setState로 변경한다고하면, 변경되지 않음.</li>\n<li><strong>결론: redux를 통한 상태변경은 CptC에서 데이터 바인딩이 된 그리드를 그릴 수가 없음. 그리드의 오류로밖에 결론이 내려지지 않음.</strong>  </li>\n<li>너무 억울.. 그리드는 다른 팀에서 제공한 라이브러리임.</li>\n</ol>\n</blockquote>\n</blockquote>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EB%A0%8C%EB%8D%94%EB%A7%81%EC%9D%B4%EB%9E%80\">렌더링이란?</a></li>\n<li>\n<p><a href=\"#%EB%A0%8C%EB%8D%94%EB%A7%81-%EC%9D%B4%EC%8A%88\">렌더링 이슈</a></p>\n<ul>\n<li>\n<ul>\n<li>\n<ul>\n<li><a href=\"#span-stylecolorblueacomponentspan\"><span style=\"color:blue\">AComponent</span></a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%F0%9F%A5%8A-react%EA%B0%80-%EB%A0%8C%EB%8D%94%EB%A7%81%EC%9D%84-%EC%8B%A4%ED%96%89%ED%95%A0-%EB%95%8C\">🥊 React가 렌더링을 실행할 때</a></li>\n<li><a href=\"#%ED%95%B4%EA%B2%B0%EC%9D%98-%EA%B3%BC%EC%A0%95\">해결의 과정</a></li>\n</ul>\n</div>","frontmatter":{"date":"January 06, 2022","title":"(React) 렌더링을 언제 하길래 데이터 변경이 안돼?","categories":"solution","author":"ssongs2","emoji":"🧩"},"fields":{"slug":"/react_render/"}},"site":{"siteMetadata":{"comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/js_copy/","nextSlug":"/react/","prevSlug":"/react_render/"}},"staticQueryHashes":["1073350324","2938748437"]}