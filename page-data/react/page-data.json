{"componentChunkName":"component---src-templates-blog-template-js","path":"/react/","result":{"data":{"cur":{"id":"96446fc0-9f9d-5430-8ea6-5c9f61652a4a","html":"<h2 id=\"문제\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C\" aria-label=\"문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제</h2>\n<p>부모로부터 내려받은 props의 값을, 자식의 componentWillReceiveProps 함수에서,\nthis.props나 nextProps의 값을 디버깅해보면 언제나 똑같다.</p>\n<h2 id=\"해결-방법\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95\" aria-label=\"해결 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해결 방법</h2>\n<ol>\n<li>구글링\n<a href=\"https://stackoverflow.com/questions/47227329/componentwillreceiveprops-this-props-and-nextprops-always-the-same\">https://stackoverflow.com/questions/47227329/componentwillreceiveprops-this-props-and-nextprops-always-the-same</a></li>\n</ol>\n<p>문제 요약\n👉 부모 컴포넌트인 ProductText는 단방향으로 공급되는 state를 가진다.<br>\n👉 스택 오버플로우의 필자는 부모 컴포넌트에서 배열이 변경될 때, 자식 컴포넌트에서 변경된 배열 prop을 통해 callback 함수를 호출하고 싶다.<br>\n👉 하지만 자식의 componentWillReceiveProps 함수에서 this.props와 nextProps 언제나 같아 변화를 감지할 수 없다.  </p>\n<p>해결책\n👉 부모의 state가 불변하도록 변경되지 않았다.<br>\n👉 그 이유는, 같은 메모리 주소의 값을 변경하였던 것.</p>\n<ol start=\"2\">\n<li>나의 문제</li>\n</ol>\n<p>부모 컴포넌트</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">    constructor<span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        super<span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span>\n\n        this.state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            faxRecvInfo <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> <span class=\"token string\">\"name\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"ssongs2\"</span>, <span class=\"token string\">\"faxNo\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"0507-1234-1234\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>    // 받는사람 정보\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    onSaveOrgPopup <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin class-name\">let</span> _faxRecvInfo <span class=\"token operator\">=</span> this.state.faxRecvInfo,\n            _faxRecvList <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>let <span class=\"token assign-left variable\">i</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span> e.length<span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            _faxRecvList <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"name\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"ssongs2\"</span>,\n                <span class=\"token string\">\"faxNo\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"0507-1111-1111\"</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        _faxRecvInfo.push<span class=\"token punctuation\">(</span>_faxRecvList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        this.setState<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> faxRecvInfo: _faxRecvInfo <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function-name function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        const <span class=\"token punctuation\">{</span> faxRecvInfo <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> this.state<span class=\"token punctuation\">;</span>\n\n        <span class=\"token builtin class-name\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;></span>\n                <span class=\"token operator\">&lt;</span>Child\n                    <span class=\"token assign-left variable\">faxRecvInfo</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>faxRecvInfo<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>/<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>자식 컴포넌트</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">    componentWillReceiveProps<span class=\"token punctuation\">(</span>nextProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        console.log<span class=\"token punctuation\">(</span><span class=\"token string\">\"this.props:\"</span>, this.props, nextProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                 // 왜? 똑같아?\n        if<span class=\"token punctuation\">(</span>this.props.faxRecvInfo <span class=\"token operator\">!=</span> nextProps.faxRecvInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function-name function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token builtin class-name\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;></span>\n            <span class=\"token operator\">&lt;</span>/<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>","excerpt":"문제 부모로부터 내려받은 props의 값을, 자식의 componentWillReceiveProps 함수에서,\nthis.props나 nextProps의 값을 디버깅해보면 언제나 똑같다. 해결 방법 구글링\nhttps://stackoverflow.com/questions/47227329/componentwillreceiveprops-this-props-and-nextprops-always-the-same 문제 요약\n👉 부모 컴포넌트인 ProductText는 단방향으로 공급되는 state를 가진다. 👉 스택 오버플로우의 필자는 부모 컴포넌트에서 배열이 변경될 때, 자식 컴포넌트에서 변경된 배열 prop을 통해 callback…","frontmatter":{"date":"December 16, 2021","title":"(react) componentWillReceiveProps - this.props and nextProps always same","categories":"solution","author":"ssongs2","emoji":"🧩"},"fields":{"slug":"/react/"}},"next":{"id":"32a2f9d3-48b0-566e-a40d-ecd7dc35312e","html":"<h2 id=\"비동기-처리\" style=\"position:relative;\"><a href=\"#%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%B2%98%EB%A6%AC\" aria-label=\"비동기 처리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>비동기 처리</h2>\n<p>생각대로 되지않아 열받을 찰나 비동기 처리에 대한 문제임을 발견하고, 각성하는 바 정리해본다.</p>\n<h3 id=\"1️⃣-첫-번째-사례\" style=\"position:relative;\"><a href=\"#1%EF%B8%8F%E2%83%A3-%EC%B2%AB-%EB%B2%88%EC%A7%B8-%EC%82%AC%EB%A1%80\" aria-label=\"1️⃣ 첫 번째 사례 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1️⃣ 첫 번째 사례</h3>\n<ul>\n<li>ajax</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">const ajax <span class=\"token operator\">=</span> new XMLHttpRequest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconst URL <span class=\"token operator\">=</span> <span class=\"token string\">\"https://api.hnpwa.com/v0/news/1.json\"</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function-name function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    ajax.open<span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span>, URL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ajax.send<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token builtin class-name\">return</span> ajax.response<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole.log<span class=\"token punctuation\">(</span>call<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span> // undefined</code></pre></div>\n<p>콘솔 창 로그는 undefined가 찍힌다.<br>\n왜그럴까?<br>\n비동기 처리의 문제이다.<br>\n서버와 통신하는 ajax 객체가 응답을 받아오기 전에 출력한다.</p>\n<h3 id=\"2️⃣-두-번째-사례\" style=\"position:relative;\"><a href=\"#2%EF%B8%8F%E2%83%A3-%EB%91%90-%EB%B2%88%EC%A7%B8-%EC%82%AC%EB%A1%80\" aria-label=\"2️⃣ 두 번째 사례 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2️⃣ 두 번째 사례</h3>\n<ul>\n<li>setTimeout();</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token keyword\">function</span> <span class=\"token function-name function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console.log<span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nsetTimeout<span class=\"token punctuation\">(</span>func, <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole.log<span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>비동기 처리 개념을 모르고 해당 코드를 본다면 콘솔 창에는 “1”, “2”가 찍힌다고 생각할 것이다.<br>\n그런데 “2”, “1”이 찍힌다.<br>\nsetTimeout() 함수에서 3초 후에 “1”을 찍게 되어있는데, 이 로직을 기다려주지 않고 나머지 코드를 먼저 실행한다.</p>\n<h2 id=\"javascript에서의-비동기-처리\" style=\"position:relative;\"><a href=\"#javascript%EC%97%90%EC%84%9C%EC%9D%98-%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%B2%98%EB%A6%AC\" aria-label=\"javascript에서의 비동기 처리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>javascript에서의 비동기 처리</h2>\n<p>위의 사례에서 살펴봤듯이 서버 통신 혹은 시간 지연 함수와 같이 실행결과를 기다리지 않는다.<br>\n비동기 처리가 필요한 이유는 사용자 경험이다.<br>\n대량의 데이터를 처리하는 서버 통신에서 응답을 받아올 때까지 나머지 로직을 멈춘다면 사용자는 무한의 시간을 기다려야 한다.  </p>\n<h2 id=\"비동기-처리-방식의-해결\" style=\"position:relative;\"><a href=\"#%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%B2%98%EB%A6%AC-%EB%B0%A9%EC%8B%9D%EC%9D%98-%ED%95%B4%EA%B2%B0\" aria-label=\"비동기 처리 방식의 해결 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>비동기 처리 방식의 해결</h2>\n<p>두둥! </p>\n<h3 id=\"🥊콜백지옥\" style=\"position:relative;\"><a href=\"#%F0%9F%A5%8A%EC%BD%9C%EB%B0%B1%EC%A7%80%EC%98%A5\" aria-label=\"🥊콜백지옥 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🥊콜백지옥</h3>\n<p>비동기 처리를 위해 콜백 함수를 연속해서 사용할 때 발생하는 문제이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$.get<span class=\"token punctuation\">(</span><span class=\"token string\">'url'</span><span class=\"token punctuation\">)</span>, function<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    a<span class=\"token punctuation\">(</span>response, function<span class=\"token punctuation\">(</span>responseA<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        b<span class=\"token punctuation\">(</span>responseA, function<span class=\"token punctuation\">(</span>responseB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            c<span class=\"token punctuation\">(</span>responseB, <span class=\"token function-name function\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>왜 콜백지옥으로 부르느냐.. 그것은 다 이유가 있답니다.<br>\n가독성도 떨어지고 유지보수 시 욕을 하게 될 수 있다.</p>\n<h3 id=\"🥊콜백지옥을-해결하는-방법\" style=\"position:relative;\"><a href=\"#%F0%9F%A5%8A%EC%BD%9C%EB%B0%B1%EC%A7%80%EC%98%A5%EC%9D%84-%ED%95%B4%EA%B2%B0%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"🥊콜백지옥을 해결하는 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🥊콜백지옥을 해결하는 방법</h3>\n<ol>\n<li>콜백 함수 분리</li>\n<li>Promise &#x26; Async</li>\n</ol>\n<h3 id=\"1️⃣-콜백-함수-분리\" style=\"position:relative;\"><a href=\"#1%EF%B8%8F%E2%83%A3-%EC%BD%9C%EB%B0%B1-%ED%95%A8%EC%88%98-%EB%B6%84%EB%A6%AC\" aria-label=\"1️⃣ 콜백 함수 분리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1️⃣ 콜백 함수 분리</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token keyword\">function</span> b<span class=\"token punctuation\">(</span>responseA<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    b<span class=\"token punctuation\">(</span>responseA, c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nfuncion c<span class=\"token punctuation\">(</span>responseB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console.log<span class=\"token punctuation\">(</span>responseB<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n$.get<span class=\"token punctuation\">(</span><span class=\"token string\">'url'</span><span class=\"token punctuation\">)</span>, function<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    a<span class=\"token punctuation\">(</span>response, b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>콜백 지옥의 첫 번째 해결방법인 콜백 함수를 분리하여 코드 구조를 개선한 예입니다.\najax 통신으로 받은 response를 파싱하여 b함수를 호출하고, b함수에서 로직 처리 후 c함수가 호출됩니다.</p>\n<h3 id=\"2️⃣-promise--async\" style=\"position:relative;\"><a href=\"#2%EF%B8%8F%E2%83%A3-promise--async\" aria-label=\"2️⃣ promise  async permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2️⃣ Promise &#x26; Async</h3>\n<p>다음 시간에..<br>\nPromise 와 Async는 조금 더 경건한 마음으로 살펴보기로 하자.</p>\n<p>참고\n👉  <a href=\"https://joshua1988.github.io/web-development/javascript/javascript-asynchronous-operation/#%EB%93%A4%EC%96%B4%EA%B0%80%EB%A9%B0\">https://joshua1988.github.io/web-development/javascript/javascript-asynchronous-operation/#%EB%93%A4%EC%96%B4%EA%B0%80%EB%A9%B0</a></p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%B2%98%EB%A6%AC\">비동기 처리</a></p>\n<ul>\n<li><a href=\"#1%EF%B8%8F%E2%83%A3-%EC%B2%AB-%EB%B2%88%EC%A7%B8-%EC%82%AC%EB%A1%80\">1️⃣ 첫 번째 사례</a></li>\n<li><a href=\"#2%EF%B8%8F%E2%83%A3-%EB%91%90-%EB%B2%88%EC%A7%B8-%EC%82%AC%EB%A1%80\">2️⃣ 두 번째 사례</a></li>\n</ul>\n</li>\n<li><a href=\"#javascript%EC%97%90%EC%84%9C%EC%9D%98-%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%B2%98%EB%A6%AC\">javascript에서의 비동기 처리</a></li>\n<li>\n<p><a href=\"#%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%B2%98%EB%A6%AC-%EB%B0%A9%EC%8B%9D%EC%9D%98-%ED%95%B4%EA%B2%B0\">비동기 처리 방식의 해결</a></p>\n<ul>\n<li><a href=\"#%F0%9F%A5%8A%EC%BD%9C%EB%B0%B1%EC%A7%80%EC%98%A5\">🥊콜백지옥</a></li>\n<li><a href=\"#%F0%9F%A5%8A%EC%BD%9C%EB%B0%B1%EC%A7%80%EC%98%A5%EC%9D%84-%ED%95%B4%EA%B2%B0%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\">🥊콜백지옥을 해결하는 방법</a></li>\n<li><a href=\"#1%EF%B8%8F%E2%83%A3-%EC%BD%9C%EB%B0%B1-%ED%95%A8%EC%88%98-%EB%B6%84%EB%A6%AC\">1️⃣ 콜백 함수 분리</a></li>\n<li><a href=\"#2%EF%B8%8F%E2%83%A3-promise--async\">2️⃣ Promise &#x26; Async</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"July 28, 2021","title":"(javascript) 동기? 비동기?","categories":"study","author":"ssongs2","emoji":"🕸"},"fields":{"slug":"/js/"}},"prev":null,"site":{"siteMetadata":{"comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/react/","nextSlug":"/js/","prevSlug":""}},"staticQueryHashes":["1073350324","2938748437"]}